{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Linear = our predictions are a **linear combination** of our inputs\n",
    "\n",
    "Regression = we will learn the relationship that relates features to labels\n",
    "\n",
    "$h$ is our hypothesis - our prediction of the mapping from input to output.\n",
    "\n",
    "# $ h = W X = w_1 x_1 + w_2 x_2 + \\dots + w_{n-1} x_{n-1} + w_n x_n$\n",
    "\n",
    "This linear combination is essentially a **weighted sum of the input features**. As we vary the value of one feature, our hypothesis will change proportionately and linearly.\n",
    "\n",
    "Imagine that we are trying to predict house price. Consider:\n",
    "- The weight associated with the feature that is the number of rooms will be large and positive, because the number of rooms contributes lots, and positively to the price of a house. \n",
    "- The weight associated with the age of the house may be negative, as older houses might be found to be worth less from the training data.\n",
    "- The weight associated with a feature that is the age of the person last living there will be zero, because the house price is independent of this feature. It does not contribute at all to the house price.\n",
    "\n",
    "\n",
    "Firstly we will create some data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from torch.autograd import Variable\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's write a function to train our model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train():\n",
    "    costs = []\n",
    "    for e in range(epochs):\n",
    "        prediction = mymodel(datain)\n",
    "        \n",
    "        cost = criterion(predictions, labels) # calculate the cost of our predictions compared to the labels\n",
    "        costs.append(cost.data) # get the data from the cost variable and append it to the list of costs\n",
    "        print('Epoch', e, 'Cost', cost.data[0])\n",
    "        \n",
    "        # unpack the parameters so that we can use values for visualisation\n",
    "        params = [mymodel.state_dict([i][0]) for i in mymodel.state_dict()]\n",
    "        weights = params[0]\n",
    "        bias = params[1]\n",
    "        print('b', bias)\n",
    "        print('w', weights)\n",
    "        \n",
    "        optimiser.zero_grad() # zero the gradients\n",
    "        cost.backward() # push the error "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
